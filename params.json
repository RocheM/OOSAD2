{"name":"Oosad2","tagline":"OOSAD2 Course Work","body":"# Welcome to the OOSAD2 repository\r\n\r\nThis repository will be used to store my course work of the OOSAD2 module.\r\n\r\nAccording to the IT Tallaght course description this module involves:\r\n\r\n\"To apply the principles of object oriented design to large-scale applications, with emphasis on the architectural framework. To equip students to extract requirements for persistence from the OO design, selecting and implementing a data management strategy. To enable the students to recognize and evaluate the key issues for performance in an object oriented system.\"\r\nAt the end of this module I intend to be able to achieve the following learning outcomes:\r\n\r\nIdentify the importance of an architectural framework in systems design, and evaluate industry-standard approaches, 4+1, ADD. Use the UML to model the appropriate architectural views.\r\nAdd design principles, patterns and implementation details to the models produced during the Object Oriented Analysis phase.\r\nIdentify the Relational and Object Data Management Strategies, and be able to map an OO model to a Relational Database schema.\r\nAssess the quality of an object model by applying appropriate metrics\r\nCourse Content\r\n\r\nObject Design (35%) GRASP, Designing Objects with Responsibilities: Creator, Information Expert, Low Coupling, Controller, High Cohesion Patterns. GoF Patterns, Singleton, Facade, Adapter. Implementation of associations, implementing methods.\r\n\r\nArchitectural Approaches & Modelling (40%) Architectural Approaches, 4+1, ADD. Logical architecture, layers, inter-layer interaction, subsystems and packages. Process view, identifying and modelling concurrency,active objects. Deployment view of the architecture. UML Package diagram, UML Component diagram. UML Deployment diagram. The three-tier architecture, Model-View-Controller pattern.\r\n\r\nData Management (15%) Persistent and Transient Objects. Strategies for Persistence: Mapping an OO model to a RDBMS. Industry standard tools, e.g. Hibernate.\r\n\r\nMetrics (10%) Object Oriented Metrics. Measuring Class Quality, Coupling, Depth of Inheritance Tree, Defect Density.\r\n\r\nLecturer: John Burns","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}